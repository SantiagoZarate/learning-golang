version: '3'
services:
  go-app:
    container_name: go-app
    build:
      context: ./snippetbox
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: "host=go_db user=root password=rootpass dbname=root sslmode=disable"
    ports:
      - "7000:7000"
    depends_on:
      go_db:
        condition: service_healthy
    networks:
      - frontend
      - backend
  go_db:
    container_name: go_db
    image: postgres:12-alpine
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: rootpass
      POSTGRES_DB: root
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgres/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - backend
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U root" ]
      interval: 10s
      timeout: 5s
      retries: 5
  client-prod:
    container_name: client-prod
    build:
      context: ./client
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - /app/web/node_modules
    networks:
      - frontend
    env_file:
      - path: ./client/.env.production
        required: true
    environment:
      - VITE_API_URL=${VITE_API_URL}
      - VITE_APP_VERSION=${VITE_APP_VERSION}
  auth_db:
    container_name: auth_db
    image: postgres:12-alpine
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: rootpass
      POSTGRES_DB: root
    ports:
      - "5433:5433"
    volumes:
      - pgdata:/var/lib/postgres/data
    networks:
      - backend
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U root" ]
      interval: 10s
      timeout: 5s
      retries: 5
  auth_api:
    container_name: auth_api
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    env_file:
      - path: ./auth-service/.env
        required: true
    ports:
      - "4000:4000"
    depends_on:
      auth_db:
        condition: service_healthy
    networks:
      - frontend
      - backend

volumes:
  pgdata: {}
networks:
  frontend:
  backend:
